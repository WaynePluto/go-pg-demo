// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"go-pg-demo/api/v1"
	"go-pg-demo/internal/middlewares"
	"go-pg-demo/internal/modules/iacc/auth"
	"go-pg-demo/internal/modules/iacc/permission"
	"go-pg-demo/internal/modules/iacc/role"
	"go-pg-demo/internal/modules/iacc/user"
	"go-pg-demo/internal/modules/template"
	"go-pg-demo/pkgs"
)

import (
	_ "go-pg-demo/docs"
)

// Injectors from wire.go:

func InitializeApp() (*App, func(), error) {
	engine := NewGin()
	config, err := pkgs.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, err := pkgs.NewLogger(config)
	if err != nil {
		return nil, nil, err
	}
	db, err := pkgs.NewConnection(config)
	if err != nil {
		return nil, nil, err
	}
	loggerMiddleware := middlewares.NewLoggerMiddleware(logger)
	authMiddleware := middlewares.NewAuthMiddleware(config, logger)
	recoveryMiddleware := middlewares.NewRecoveryMiddleware(logger)
	requestValidator := pkgs.NewRequestValidator()
	handler := template.NewTemplateHandler(db, logger, requestValidator)
	userHandler := user.NewUserHandler(db, logger, requestValidator)
	roleHandler := role.NewRoleHandler(db, logger, requestValidator)
	authHandler := auth.NewAuthHandler(db, logger, requestValidator, config)
	permissionHandler := permission.NewPermissionHandler(db, logger, requestValidator)
	router := v1.NewRouter(engine, handler, userHandler, roleHandler, authHandler, permissionHandler)
	app, err := NewApp(engine, logger, config, db, loggerMiddleware, authMiddleware, recoveryMiddleware, router)
	if err != nil {
		return nil, nil, err
	}
	return app, func() {
	}, nil
}
